
% ********  Template for children  ********

% 1. Save as appropriate chapterName (Lecture7, TutoriaL11 etc)
% 2. Change title to above
% 3. Change opening chunk name (Temp0) to chapter title
% 4. Remove/replace chunk Temp1

% All chunk names to be preceded by Tn or Ln  (where n is chapter or tutorial number)


<<Lecture11, include=FALSE>>=
library(knitr)
set_parent("../tidyRcourseBook.rnw")
EVAL = FALSE
@


\chapter{Lecture 11- Control structures}\label{L11}



\author{Brian Williams $<$\href{mailto:bjw649@gmail.com}%
{bjw649@gmail.com}$>$}


\section{Summary}

\section{Logistics}

Open RStudio. Open courseCode.R. Find "Lecture11".


\section{Control structures} \index{Control structures}

Computational investigations almost always involve repetition of many related calculations.  The process is often more formally referred to as \textbf{iteration}. The repetitions are usually controlled by structures which are broadly known as 'loops'.  Within these structures there is often a need to assess data by some logic and perhaps perform different computations on different forms of data. This assessment is undertaken in "if" structures and in modern computer languages, we see things like:

"\textcolor{blue}{if}.. (some logical condition)..  \textcolor{blue}{then} ..(some computation).. \textcolor{blue}{else}.. (another computation)..  \textcolor{blue}{end if}"

Hadley Wickham's "R for Data Science" has a particularly good chapter on iteration \href{https://r4ds.had.co.nz/iteration.html}{\textcolor{blue}{\underline{here}}}. 
In the next couple of sections we will look at the looping structures and if structures which are available in R.

\section{Loops}\label{L11loops}\index{Control structures!loops}\index{Loops}
Loops are a fundamental component of all computer programming languages.  They allow straightforward repetition of computations.  We shall see that there are a couple of ways of controlling the way the repetition is undertaken. Like many other programming languages, R has \texttt{for} loops, \texttt{while} loops and \texttt{repeat} loops. The key words \texttt{break} and \texttt{next} play an important role in looping structures, especially with \texttt{repeat}, which has no pre-defined exit! Have a look at \href{https://cran.r-project.org/doc/manuals/r-release/R-lang.html#Looping}{\textcolor{blue}{\underline{R Language definition - looping}}}

Because R is fundamentally 'vectorized' in its structure, its internal code for vector operations is extremely efficient and while programmed loops are sometimes necessary, it is important to always be aware of the much greater efficiency which is potentially available with vector operations, if the same result can be achieved that way.

However, let's begin with the \texttt{for} loop.

\subsection{For loops}\index{Loops!for loops}

The syntax of a \texttt{for} loop is as follows:

\texttt{for(name in range) body}

The example below is typical, but the use of the ':' operator is possibly dangerous if the range is defined with variables. 

<<L11Loops1a, eval = EVAL>>=
##For loops
#------------------------------------------------------------------------------------
# Throw 2 dice 10000 times
n <- 100000
s1 <- Sys.time()
#result <- numeric(n)                                                              #1.
for (i in 1:n) {                                                                  #2.
  result[i] <- sum(sample(1:6,2,replace=T))                                       #3.
}
diff <- Sys.time() - s1
diff
df <- data.frame(result = result)
ggplot(df) + geom_bar(aes(x = result), fill = "light blue")

@
\subsubsection{Notes}
\begin{enumerate}
\item{The vector \texttt{result} must be initialized before its first use.}
\item{This is a typical numeric example in which the block surrounded by \{\}'s will be executed 100000 times, unless there is a control (e.g. a \texttt{break} or a \texttt{return} - later in this session) inside the loop preventing completion. The loop index 'i' is often useful to refer to elements of a vector as is done here.}
\item{ \texttt{sample(1:6,2,replace=T)} returns a two element vector of sampling from 1:6, these two values are then summed.}
\end{enumerate}

Here's the preferred way of writing the same code, if for some reason, variables are to be used to define the sequence limits:

<<L11Loops1b, eval = EVAL>>=
# Throw 2 dice 100000 times
n <- 100000
s1 <- Sys.time()
result <- numeric(n)                                                              #1.
for (i in seq_along(1:n)) {           ###See R for Data Science!!                                     #2.
  result[i] <- sum(sample(1:6,2,replace=T))                                       #3.
}
diff = Sys.time()-s1
diff
hist(result)
df <- data.frame(result = result)
ggplot(df) + geom_bar(aes(x = result), fill = "light blue", bins = 11)

@


Here's another example, this time of a loop through a string sequence. (But we do have much better ways of getting this result, of course!)
<<L11Loops2, eval = EVAL>>=
#   looping through a string sequence

bP <- read.table(file="../Data/BackPain.csv",sep=",",header=TRUE)
bP <- na.omit(bP)    #Remove all the rows with NA's
str(bP)
countries <- levels(bP$country)
dfprint <- data.frame(Country = countries, RespondentNumbers= integer(6))        #1.
for (ic in seq(countries)){                                                      #2.
  dfprint[ic,2]<- nrow(bP[bP$country == countries[ic],])                         #3.
}
# Now lets add the total numbers to the data frame. A little trickier because
# it's a new level in our country factors
totalNumbers <- nrow(bP)
dfprint$Country <- factor(dfprint$Country, levels = c(levels(dfprint$Country),
                                                      "Total"))                  #4.
extraRow <- data.frame(Country = as.factor("Total"),RespondentNumbers = totalNumbers)
dfprint <- bind_rows(dfprint,extraRow)                                           #5.
print(dfprint)                                                                   #6.

#---------------------------------------------------------------------------------
@
\subsubsection{Notes}
\begin{enumerate}
\item{The new data frame is initialized with the names of the SAGE countries and an empty integer vector.}
\item{Here we see a loop on a sequence of factor levels (a vector of character strings).}
\item{Now we get the length of columns in which only rows including the ic'th country are counted.}
\item{Here we add a new row with 'Factor' Total. Firstly, we add the additional factor level - otherwise we'll get an error when we try to add the new row.}
\item{Now we can add the new row using \texttt{bind\_rows()}.}
\item{Finally,  we can print out our newly assembled data frame. (But still having R coerce!)}
\end{enumerate}

\subsection{While loops}\index{Loops!while loops}

<<L11Loops3, eval = EVAL>>=
##While loops
# In This example we start after a miraculous sequence of three twelves (what's the
#  probability?)
# Our little script will tell us how many throws it takes to return an average
# within eps of the
# theoretical mean of 7.

nThrows     <- 3                                                                    #1.
totalThrows <- 36                                                                   #2.
plotVec     <- c(NULL)                                                              #3.
delta       <- 6.                                                                   #4.
set.seed(8237)  #This ensures that your pseudo-random sampling is the same as mine!
eps         <- 0.001  # Arbitrarily chosen tolerance
while (abs(delta) > eps) {
   nThrows          <- nThrows + 1                                                  #5.
   totalThrows      <- totalThrows + sum(sample(1:6,2,replace=T))                   #6.
   meanThrows       <- totalThrows/nThrows
   delta            <- (meanThrows - 7)
   if(nThrows%%100 == 0) cat("After ",nThrows, " throws,  delta = ", delta, "\n")                                               #7.
   plotVec[nThrows] <- delta                                                        #8.
}

df <- data.frame(plotVec = plotVec, nthrows = 1:nThrows)
ggplot(df)+geom_point(aes(x = nthrows, y = plotVec), 
                      colour= "dark blue", size = 1) +
  xlab("No. of throws") +
  ylab("delta")

cat("No. of throws to convergence: ", nThrows)
if(delta==0)
{
  cat("Converged exactly to true mean (7).[eps = ", eps)
} else {
  options(digits = 8)
  cat("Converged to ",delta, "from true mean (7). eps = ", eps )
  options(digits = 7)
}

#------------------------------------------------------------------------------------
@
\subsubsection{Notes}
\begin{enumerate}
\item{Set the number of throws so far to our initial 3.}
\item{The cumulative total so far is 3 times 12.}
\item{Initialize a null vector in which we'll save the plotting data.}
\item{Set delta large enough that it won't fail the while condition when we first enter the loop!}
\item{When using the while statement we have to construct our own loop counter.}
\item{Each time through the loop the new throw is added to our original score of 36 from the first three throws.}
\item{With long loops this is a neat way of printing out progress at regular intervals.}
\item{Add the new data to the vector for plotting. }

\end{enumerate}
\subsection{Repeat loops}\index{Loops!repeat loops}

<<L11Loops4, eval = EVAL>>=
##Repeat loops
#-----------------------------------------------------------------------------------
#Generate an unusual sequence
kk <- 1
ii <- 1
jj <- 4
loops <- 0
repeat{                                                                  #1.
  loops <- loops + 1
  kk <- kk + ii
  if (kk%%2 == 0 | kk%%5 == 0) next                                      #2.
  kk <- kk + jj
  cat(c('loops, kk', loops, kk), sep = c("     ","   ",'\n' ))
  if(kk > 50)break                                                       #3.
}

#----------------------------------------------------------------------------------
@
\subsubsection{Notes}
\begin{enumerate}
\item{Start of a block of repeated code. }
\item{The key word \texttt{next}\index{Loops!repeat loops!next} forces the start of a new loop. If the total so far is divisible by 2 or 5, skip the addition of jj and the printing (cat) and loop again.}
\item{\texttt{break}\index{Loops!repeat loops!break} finishes the repeat loop and moves execution to the command (if any) following the \}.}
\end{enumerate}

\section{\texttt{If} structures in R}\index{if structures}
We have already seen how logical expressions can be used in indexes of vectors.  the same expressions apply in
\texttt{if} structures. Here's a very simple example:
<<L11if1, eval = EVAL>>=
x <- 1
if (x == 1){
  print(x)
}
@
Run it then change x to some other number and run it again.
So the syntax is an \texttt{if} followed by a conditional (logical) expression in parenthesis, followed by some other code in a block delimited by \{\}.  To keep things tidy, use the layout above, with the opening \{ immediately following the \texttt{if} condition and finish with a new line for the closing \}. The other stuff (as many commands as you like) goes in between.

Usually we have to provide an alternative outcome if our condition is not \texttt{TRUE}.
<<L11if2, eval = EVAL>>=
x <- 1
if (x == 1)
  {
    print("Disaster")
  } else 
  {
    print(x)
  }
@
Run it then change x to some other number and run it again.
NOTE: it is critical that the closing '\}' of the first block is followed on the same line by the \texttt{else}\index{if!else} . If you put the \texttt{else} on the next line, you'll get an error! Some programmers prefer the following style - suit yourself, but this one is preferred by \href{http://cran.r-project.org/web/packages/rockchalk/vignettes/Rstyle.pdf}{ Paul Johnson}!
<<L11if3, eval = EVAL>>=
x <- 1
if (x == 1) {
  print("Disaster")
} else {
  print(x)
}

@

Then for the utimate in choices, we have the \texttt{else if}, which allows as many options as we might need and can finish with an \texttt{else} to clean up those we haven't menioned! \index{if!else if}
<<L11if4, eval = EVAL>>=
x <- 1
if (x == 1) {
  print("Disaster")
} else if (x > 10){
   print(x)
} else if (x < 10) {
  print("Have we got a logical problem here?")
}
@

.  and we fix the little logical problem - so....
<<L11if5, eval = EVAL>>=
x <- 10
if (x == 1) {
  print("Disaster")
} else if (x > 10){
   print(x)
} else if (x < 10) {
  print("Have we got a logical problem here?")
} else {
  print(" x is exactly equal to 10!")
}
@

The \texttt{if} control statements can be nested as deeply as you need, but doing so can present some tricky problems in logic.  It may be desirable to sketch the decision tree structure with a few simple examples on a piece of paper before you begin - and test, test, test, when you have written the code!!


\subsection{\texttt{switch()}}
Sometimes, you will have a number of different \texttt{else if} conditions and it becomes clumsy with lots of squiggly brackets everywhere.  For these situations, there is a helpful function called \texttt{switch()}\index{Core functions!switch()} - check it out with \texttt{help(switch)}. The extract below is from the \href{http://cran.r-project.org/doc/manuals/r-release/R-lang.html\#if}{R Language definition}.
\begin{quote}
Technically speaking, switch is just another function, but its semantics are close to those of control structures of other programming languages.

The syntax is:

\texttt{switch (statement, list)}

where the elements of \texttt{list} may be named. First, \texttt{statement} is evaluated and the result, value, obtained. If value is a number between 1 and the length of \texttt{list} then the corresponding element of \texttt{list} is evaluated and the result returned. If value is too large or too small NULL is returned.
\end{quote}
<<L11switch, eval = EVAL>>=
x <- 2
switch(x, 2+2, mean(1:10), rnorm(5))
switch(2, 2+2, mean(1:10), rnorm(5))
switch(6, 2+2, mean(1:10), rnorm(5))

@
If you want to report a default value, enclose the \texttt{switch} in an \texttt{if} \texttt{else} :

<<L11switchdefault, eval = EVAL>>=
 x <- 3
if (x < 4 ){
  switch(x, 2+2, mean(1:10), rnorm(5))
} else {
  print('Default value for switch')
}
@
Test it with values of x.
You can also use characters rather than numbers in \texttt{switch()} - have a look at the  \href{http://cran.r-project.org/doc/manuals/r-release/R-lang.html\#if}{R Language definition - switch}.


%\printindex
